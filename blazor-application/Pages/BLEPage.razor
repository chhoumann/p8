@page "/"

@using BlazorBLE.Services
@using BlazorBLE.Extensions
@using Plugin.BLE.Abstractions.Contracts
@using BlazorBLE.Data

@inject BLEScannerService BLEScannerService

@if (BLEScannerService.Devices == null || rssiDataCollector == null)
{
    <LoadingPage/>
}
else 
{
    <div class="my-4 w-full text-center">
        <div class="mb-4">
            <button class="w-5/6 bg-blue-500 text-white font-bold py-2 px-4 rounded @((selectedDevices.Count == 0) ? "bg-slate-300 cursor-not-allowed text-opacity-60" : "")"
                    disabled=@(selectedDevices.Count == 0)
                @onclick=ToggleListening>
                @(rssiDataCollector.IsListening ? "Stop listening" : "Listen")
            </button>
        </div>
        <div>
            <button class="w-5/6 bg-blue-500 text-white font-bold py-2 px-4 rounded @((!rssiDataCollector.IsListening) ? "bg-slate-300 cursor-not-allowed text-opacity-60" : "")"
                    disabled=@(!rssiDataCollector.IsListening)
                @onclick=OnClickCollectData>
                @(!rssiDataCollector.IsCollecting && !delayedActionExecutor.IsRunning ? "Start collecting data" : "Stop collecting data")
            </button>
        </div>
    </div>
    @if (!rssiDataCollector.IsListening)
    {
        <div class="text-2xl font-extrabold text-center">Available devices</div>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Id</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (IDevice device in BLEScannerService.Devices)
                {
                    <tr>
                        <td>@(device.GetDeviceDisplayName())</td>
                        <td>
                            <input type="checkbox" 
                                   @onchange="e => OnDeviceSelectionChanged(e, device)" 
                                   checked="@selectedDevices.Contains(device)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="my-4">
            <div class="flex items-center mb-2">
                <div class="w-1/4 pr-2">Label:</div>
                <div class="w-1/2 flex">
                    <select class="w-full" @bind="rssiDataCollector.CurrentLabel" @bind:event="oninput">
                        @foreach (ClassLabel label in Enum.GetValues(typeof(ClassLabel)))
                        {
                            <option value="@label">@label</option>
                        }
                    </select>
                </div>
            </div>
            <div class="flex items-center mb-2">
                <div class="w-1/4 pr-2">Threshold</div>
                <div class="w-1/2 flex items-center mr-2">
                    <input id="default-range" type="range" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointerm" @bind="distanceThreshold" @bind:event="oninput">
                </div>
                <div class="text-nowrap text-right">@(distanceThreshold) dBm</div>
            </div>
        </div>

        @if (!rssiDataCollector.IsCollecting)
        {
            <div class="my-3 text-center">
                @if (!delayedActionExecutor.IsRunning)
                {
                    <div>
                        Status: <span class="font-bold"> @(isInsideRoom ? "Inside room" : "Outside room") </span>
                    </div>
                }
                else
                {
                    <div class="text-2xl font-extrabold text-center">@delayedActionExecutor.SecondsRemaining + 1</div>
                }
            </div>
        }
        else
        {
            <div class="flex flex-col items-center justify-center">
                <div>
                    <Spinner/>
                </div>
                <div class="text-1xl font-extrabold">
                    Collecting data...
                </div>
            </div>
        }
    }
}

@code {
    [Inject]
    private IPromptService promptService { get; set; }

    private readonly List<IDevice> selectedDevices = new();
    private readonly RssiDataCollector rssiDataCollector = new();
    private readonly BLEAdvertisementScanner advertisementScanner = new();
    private readonly RssiDataHandler rssiDataHandler = new(5, 0.5);

    private DelayedActionExecutor delayedActionExecutor;

    private bool isInsideRoom;

    private int distanceThreshold = 10;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        BLEScannerService.DevicesChanged += StateHasChanged;
        advertisementScanner.BeaconAdvertised += OnBeaconAdvertised;
        rssiDataCollector.BeaconRssisUpdated += OnBeaconRssisUpdated;

        delayedActionExecutor = new DelayedActionExecutor(5, StartDataCollecting);
        delayedActionExecutor.SecondElapsed += () => InvokeAsync(StateHasChanged);

        rssiDataHandler.LoadData("test_data.json");
    }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(BLEScannerService.BeginScan);
    }

    private void OnDeviceSelectionChanged(ChangeEventArgs e, IDevice device)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked && !selectedDevices.Contains(device))
        {
            selectedDevices.Add(device);
        }
        else if (!isChecked && selectedDevices.Contains(device))
        {
            selectedDevices.Remove(device);
        }
    }

    private void OnBeaconRssisUpdated()
    {
        RawBeaconRssiMeasurement latestMeasurement = rssiDataCollector.GetLatestMeasurement();
        isInsideRoom = rssiDataHandler.IsInsideRoom(latestMeasurement);

        StateHasChanged();
    }

    private void OnBeaconAdvertised(IDevice device)
    {
        rssiDataCollector.UpdateBeaconRssi(device);
    }

    private void ToggleListening()
    {
        if (!rssiDataCollector.IsListening)
        {
            rssiDataCollector.Listen(selectedDevices, TimeSpan.FromMilliseconds(500));
        }
        else
        {
            rssiDataCollector.StopListening();
        }
    }

    private void OnClickCollectData()
    {
        if (rssiDataCollector.IsCollecting)
        {
            StopDataCollecting();
        }
        else if (delayedActionExecutor.IsRunning)
        {
            delayedActionExecutor.Stop();
        }
        else
        {
            delayedActionExecutor.Start();
        }

        InvokeAsync(StateHasChanged);
    }
    
    private void StartDataCollecting()
    {
        if (rssiDataCollector.IsCollecting) return;
        
        rssiDataCollector.CollectRssiData();
        InvokeAsync(StateHasChanged);
    }

    private void StopDataCollecting()
    {
        if (!rssiDataCollector.IsCollecting) return;
            
        rssiDataCollector.StopCollectingRssiData();
        InvokeAsync(StateHasChanged);
    }
}