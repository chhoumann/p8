@page "/"

@using BlazorBLE.Services
@using BlazorBLE.Extensions
@using Plugin.BLE.Abstractions.Contracts
@using BlazorBLE.Data

@inject BLEScannerService BLEScannerService

<h1>Bluetooth Low Energy iBeacons</h1>

@if (BLEScannerService.Devices == null || rssiDataCollector == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Id</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (IDevice device in BLEScannerService.Devices)
            {
                <tr>
                    <td>@(device.GetDeviceDisplayName())</td>
                    <td>
                        <input type="checkbox" @onchange="e => OnDeviceSelectionChanged(e, device)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <br/>
    <div style="display:flex; width:100%; justify-content:center;">
        <div>Status: @(isInsideRoom ? "Inside room" : "Outside room")</div>
    </div>
    <br/>
    <div style="display:flex; width:100%; justify-content:center;">
        <button @onclick=ToggleMeasuring>@(!rssiDataCollector.IsMeasuring ? "Start measuring" : "Stop measuring")</button>
        <button disabled=@(!rssiDataCollector.IsMeasuring) @onclick=ToggleDataCollecting>@(!rssiDataCollector.IsCollecting ? "Start collecting data" : "Stop collecting data")</button>
    </div>
    <br/>
    <div>
        <div>Distance Threshold = @(distanceThreshold) dBm</div>
        <div style="display: flex; flex-direction: row; align-items: center;">
            <input type="range" min="1" max="100" step="1" @bind="distanceThreshold" @bind:event="oninput" style="width: 100%" />
        </div>
    </div>
    <br/>
    <div>Label</div>
    <div style="display: flex; flex-direction: row; align-items: center;">
        <select @bind="rssiDataCollector.CurrentLabel" @bind:event="oninput" style="width: 100%">
            @foreach (ClassLabel label in Enum.GetValues(typeof(ClassLabel)))
            {
                <option value="@label">@label</option>
            }
        </select>
    </div>
}

@code {
    [Inject]
    private IPromptService promptService { get; set; }

    private readonly List<IDevice> selectedDevices = new();
    private readonly RssiDataCollector rssiDataCollector = new();
    private readonly BLEAdvertisementScanner advertisementScanner = new();
    private readonly  RssiDataHandler rssiDataHandler = new();

    private bool isInsideRoom;

    private int distanceThreshold = 10;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        BLEScannerService.DevicesChanged += StateHasChanged;
        advertisementScanner.BeaconAdvertised += OnBeaconAdvertised;
        rssiDataCollector.BeaconRssisUpdated += OnBeaconRssisUpdated;

        rssiDataHandler.LoadData("test_data.json");
    }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(BLEScannerService.BeginScan);
    }

    private void OnDeviceSelectionChanged(ChangeEventArgs e, IDevice device)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked && !selectedDevices.Contains(device))
        {
            selectedDevices.Add(device);
        }
        else if (!isChecked && selectedDevices.Contains(device))
        {
            selectedDevices.Remove(device);
        }
    }

    private void OnBeaconRssisUpdated()
    {
        BeaconRssiMeasurement[] latestMeasurement = rssiDataCollector.GetLatestMeasurement();
        isInsideRoom = rssiDataHandler.IsInsideRoom(latestMeasurement, distanceThreshold);

        StateHasChanged();
    }

    private void OnBeaconAdvertised(IDevice device)
    {
        rssiDataCollector.UpdateBeaconRssi(device);
    }

    private void ToggleMeasuring()
    {
        if (!rssiDataCollector.IsMeasuring)
        {
            rssiDataCollector.StartMeasuring(selectedDevices, TimeSpan.FromMilliseconds(500));
        }
        else
        {
            rssiDataCollector.StopMeasuring();
        }
    }

    private void ToggleDataCollecting()
    {
        if (!rssiDataCollector.IsCollecting)
        {
            rssiDataCollector.CollectRssiData();
        }
        else
        {
            rssiDataCollector.StopCollectingRssiData();
            rssiDataCollector.DataSet.WriteToJson("test_data.json");
        }
    }
}
