@page "/"

@using BlazorBLE.Data;
@using BlazorBLE.Services
@using BlazorBLE.Extensions
@using Plugin.BLE.Abstractions
@using Plugin.BLE.Abstractions.Contracts
@using Plugin.BLE.Abstractions.EventArgs

@inject BLEScannerService BLEScannerService

<h1>Bluetooth Low Energy iBeacons</h1>

@if (BLEScannerService.Devices == null || rssiDataCollector == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Id</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (IDevice device in BLEScannerService.Devices)
            {
                <tr>
                    <td>@(device.GetDeviceDisplayName())</td>
                    <td>
                        <input type="checkbox" @onchange="(e) => OnDeviceSelectionChanged(e, device)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div style="display:flex; width:100%; justify-content:center;">
        <button @onclick=ToggleMeasuring>@(!rssiDataCollector.IsMeasuring ? "Start measuring" : "Stop measuring")</button>
    </div>
}

@code {
    [Inject]
    private IPromptService promptService { get; set; }

    private List<IDevice> selectedDevices = new();
    private RssiDataCollector rssiDataCollector = new();
    private BLEAdvertisementScanner advertisementScanner = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        BLEScannerService.DevicesChanged += StateHasChanged;
        advertisementScanner.BeaconAdvertised += OnBeaconAdvertised;
    }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(BLEScannerService.BeginScan);
    }

    private void OnDeviceSelectionChanged(ChangeEventArgs e, IDevice device)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked && !selectedDevices.Contains(device))
        {
            selectedDevices.Add(device);
        }
        else if (!isChecked && selectedDevices.Contains(device))
        {
            selectedDevices.Remove(device);
        }
    }

    private void OnBeaconAdvertised(IDevice device)
    {
        rssiDataCollector.UpdateBeaconRssi(device);
    }

    private void ToggleMeasuring()
    {
        if (!rssiDataCollector.IsMeasuring)
        {
            rssiDataCollector.StartMeasuring(selectedDevices, TimeSpan.FromMilliseconds(500));
        }
        else
        {
            rssiDataCollector.StopMeasuring();
            rssiDataCollector.Measurements.WriteToJson("test_data.json");
        }
    }
}
